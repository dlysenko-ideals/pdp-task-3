name: CI/CD Pipeline

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  s3-sync:
    name: Sync to S3
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sync to S3
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: |
          aws s3 sync dist/pdp-task-3/browser $S3_BUCKET --delete

  notify:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [lint-and-test, build, s3-sync]
    if: always()

    steps:
      - name: Send Slack Notification
        run: |
          if [[ "${{ needs.lint-and-test.result }}" == "success" && "${{ needs.build.result }}" == "success" && "${{ needs.s3-sync.result }}" == "success" ]]; then
            message="üöÄ Deployment successful for ${{ github.repository }} on branch ${{ github.ref_name }}"
          else
            message="‚ùå Deployment failed for ${{ github.repository }} on branch ${{ github.ref_name }}"
          fi

          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"${message}\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
